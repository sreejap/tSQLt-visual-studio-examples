# This is a basic workflow to help you get started with Actions

name: Build_And_Test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SPAWNDATAIMAGE: "mssql-empty:v2019"
  TARGETDATABASE: "tSQLtVSTemplate"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  create_ci_mssql_instance:
    runs-on: windows-latest

    steps:
      - name: Install DBA Tools
        shell: pwsh
        run: |
          Write-Host "Downloading and installing dbatools..."
          Set-ExecutionPolicy -Scope CurrentUser RemoteSigned
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          $ProgressPreference = "SilentlyContinue"
          Install-Module dbatools 
          
#-Confirm:$False -Force

      - name: Install spawnctl.exe
        shell: pwsh
        run: |
          Write-Host "Downloading and installing spawnctl..."
          Invoke-WebRequest -Uri "https://run.spawn.cc/spawnctl.exe" -UseBasicParsing -OutFile "${{ github.workspace }}\spawnctl.exe"
          & "${{ github.workspace }}\spawnctl.exe" version

      - name: Create Data Container
        id: create-data-container
        shell: pwsh
        run: |
          echo "Creating 'tSQLtOnLinux' Spawn data container from image '$env:spawnDataImage'";
          $containerName = & "${{ github.workspace }}\spawnctl.exe" create data-container --image $env:spawnDataImage --lifetime 10m -q
          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
          Write-Host "Container Name: "$containerName;
          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";

          if ([string]::IsNullOrEmpty($containerName)) {
              Write-Error "Error creating data container.";
              return;
          }

          $containerJSON= & "${{ github.workspace }}\spawnctl.exe" get data-container $containerName -o json
          $containerJSON;


          $containerInfo = ConvertFrom-JSON -inputObject $containerJSON;
          $containerFQDN=$containerInfo.host+", "+$containerInfo.port;
          $containerUser=$containerInfo.user;
          $containerPassword=$containerInfo.password;

          echo "Successfully created Spawn data container '$containerName'"
          Write-Host ('::set-output name=containerFQDN::'+$containerFQDN);
          Write-Host ('::set-output name=containerUser::'+$containerUser);
          Write-Host ('::set-output name=containerPassword::'+$containerPassword);
        env:
          SPAWNCTL_ACCESS_TOKEN: ${{ secrets.SPAWNCTL_ACCESS_TOKEN }}
          spawnDataImage: ${{ env.SPAWNDATAIMAGE }}

      - name: Print SQL Server Version Info
        shell: pwsh
        run: |
          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
          Write-Host "";

          $DS = Invoke-Sqlcmd -ConnectionTimeout 600 -Query "SELECT SUSER_NAME() U,SYSDATETIME() T,@@VERSION V;" -ServerInstance "${{ steps.create-data-container.outputs.containerFQDN }}" -Username "${{ steps.create-data-container.outputs.containerUser }}" -Password "${{ steps.create-data-container.outputs.containerPassword }}" -As DataSet
          $DS.Tables[0].Rows | %{ echo "{ $($_['U']), $($_['T']), $($_['V']) }" };

          Write-Host "";
          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";

      - name: Print SQL Server Version Info (dbatools)
        shell: pwsh
        run: |
          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
          Write-Host "";
          $secStringPassword = ConvertTo-SecureString "${{ steps.create-data-container.outputs.containerPassword }}" -AsPlainText -Force
          [pscredential]$credObject = New-Object System.Management.Automation.PSCredential ("${{ steps.create-data-container.outputs.containerUser }}", $secStringPassword)

          $DS = Invoke-dbaquery -Query "SELECT SUSER_NAME() U,SYSDATETIME() T,@@VERSION V;" -SqlInstance ('${{ steps.create-data-container.outputs.containerFQDN }}')  -SqlCredential $credObject  -As DataSet
          $DS.Tables[0].Rows | %{ echo "{ $($_['U']), $($_['T']), $($_['V']) }" };

          Write-Host "";
          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";

    outputs:
      containerFQDN: ${{ steps.create-data-container.outputs.containerFQDN }}
      containerUser: ${{ steps.create-data-container.outputs.containerUser }}
      containerPassword: ${{ steps.create-data-container.outputs.containerPassword }} 


  # This workflow contains a single job called "build"
  build:
    needs: [create_ci_mssql_instance]
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3

      # Runs a set of commands using the runners shell
      - name: Build database solution
        shell: pwsh
        run: |
          msbuild -version

          #dbatools? maybe we can install here, and then use Invoke-DbaQuery?

          $targetConnectionString = "Data Source="+$env:containerFQDN+";User ID="+$env:containerUser+";Password="+$env:containerPassword+";Pooling=False;Integrated Security=false";
          msbuild.exe .\tSQLtVSTemplate\tSQLtVSTemplate.sln -p:Configuration=Debug -p:TargetConnectionString="$targetConnectionString" -p:TargetDatabase="$env:targetDatabase" -t:Build -t:Deploy
        env:
          containerFQDN: ${{ needs.create_ci_mssql_instance.outputs.containerFQDN }}
          containerUser: ${{ needs.create_ci_mssql_instance.outputs.containerUser }}
          containerPassword: ${{ needs.create_ci_mssql_instance.outputs.containerPassword }}
          targetDatabase: ${{ env.TARGETDATABASE }}


  validate_build:
    needs: [build]

    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

